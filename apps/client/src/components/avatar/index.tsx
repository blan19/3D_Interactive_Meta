/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/city city.glb -o src/components/city/index.jsx -r public
*/

import { useGLTF } from '@react-three/drei';
import { useEffect, useMemo, useRef } from 'react';
import { SkeletonUtils } from 'three-stdlib';
import { Vector3 } from '../../lib/three';
import { RigidBody } from '@react-three/rapier';

interface AvatarProps {
  url: string;
}

const Avatar = ({ url }: AvatarProps) => {
  const avatar = useRef();
  const { scene } = useGLTF(url);

  // Skinned meshes cannot be re-used in threejs without cloning them
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);

  useEffect(() => {
    clone.traverse((child) => {
      if (child.isObject3D) {
        child.castShadow = true;
        child.receiveShadow = true;
      }
    });
  }, [clone]);
  return (
    <RigidBody type="dynamic">
      <group position={new Vector3(0, 0, 0)}>
        <primitive object={clone} ref={avatar} />
      </group>
    </RigidBody>
  );
};

export default Avatar;
